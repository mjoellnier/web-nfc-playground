{"version":3,"sources":["components/button/Buttons.tsx","pages/App.tsx","pages/SimpleReading.tsx","serviceWorker.ts","index.tsx"],"names":["MenuButton","text","target","to","className","App","React","canRead","setCanRead","canWrite","setCanWrite","console","log","window","id","SimpleReading","setResult","reader","NDEFReader","scan","then","alert","onerror","onreading","event","JSON","stringify","catch","error","Boolean","location","hostname","match","ReactDOM","render","StrictMode","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kTAIaA,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,OAKA,OACE,gBAAC,IAAD,CAAMC,GAAID,EAAQE,UAAU,4BAC1B,uBAAKA,UAAU,oBAAoBH,KCuB1BI,EAhCH,WAAO,IAAD,EACcC,YAAe,GAD7B,mBACTC,EADS,KACAC,EADA,OAEgBF,YAAe,GAF/B,mBAETG,EAFS,KAECC,EAFD,KAoBhB,OAhBAJ,aAAgB,WACdK,QAAQC,IAAI,mCACR,eAAgBC,QAClBF,QAAQC,IAAI,iCACZJ,GAAW,IAEXG,QAAQC,IAAI,qCAEV,eAAgBC,QAClBF,QAAQC,IAAI,kCACZF,GAAY,IAEZC,QAAQC,IAAI,6CAEb,IAGD,uBAAKR,UAAU,gBACb,uBAAKU,GAAG,wBACN,mDACA,0CAAkBP,EAAU,SAAM,UAClC,0CAAkBE,EAAW,SAAM,WAErC,gBAAC,EAAD,CAAYP,OAAO,iBAAiBD,KAAK,qBCIhCc,EA9BO,WAAO,IAAD,EACET,WAAe,cADjB,mBACXU,GADW,WAuB1B,OApBAV,aAAgB,WACd,IAAMW,EAAS,IAAIC,WACnBD,EACGE,OACAC,MAAK,WACJC,MAAM,8BACNJ,EAAOK,QAAU,WACfN,EAAU,wDAEZC,EAAOM,UAAY,SAACC,GAClBb,QAAQC,IAAI,sBACZS,MAAMI,KAAKC,UAAUF,IACrBR,EAAUQ,OAGbG,OAAM,SAACC,GACNP,MAAM,gCAAD,OAAiCO,EAAjC,WAER,IAGD,uBAAKxB,UAAU,gBACb,oD,OClBcyB,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,KAAK,iBAAiBC,OAAK,EAACC,UAAWvB,MAGlDwB,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMkB,c","file":"static/js/main.033f04fe.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"./buttonStyle.scss\";\nimport { Link } from \"react-router-dom\";\n\nexport const MenuButton = ({\n  text,\n  target,\n}: {\n  text: string;\n  target: string;\n}) => {\n  return (\n    <Link to={target} className=\"main-menu-button-wrapper\">\n      <div className=\"main-menu-button\">{text}</div>\n    </Link>\n  );\n};\n","import * as React from \"react\";\nimport \"../assets/styles/App.scss\";\nimport { MenuButton } from \"../components/button/Buttons\";\n\nconst App = () => {\n  const [canRead, setCanRead] = React.useState(false);\n  const [canWrite, setCanWrite] = React.useState(false);\n\n  React.useEffect(() => {\n    console.log(\"Checking your NFC capabilities:\");\n    if (\"NDEFReader\" in window) {\n      console.log(\"✅ You can read NFC tags!\");\n      setCanRead(true);\n    } else {\n      console.log(\"❌ You can NOT read NFC tags!\");\n    }\n    if (\"NDEFWriter\" in window) {\n      console.log(\"✅ You can write NFC tags!\");\n      setCanWrite(true);\n    } else {\n      console.log(\"❌ You can NOT write read NFC tags!\");\n    }\n  }, []);\n\n  return (\n    <div className=\"home-wrapper\">\n      <div id=\"nfc-capability-intro\">\n        <h1>Your NFC capabilites:</h1>\n        <h3>Reading NFC: {canRead ? \"✅\" : \"❌\"}</h3>\n        <h3>Writing NFC: {canWrite ? \"✅\" : \"❌\"}</h3>\n      </div>\n      <MenuButton target=\"/simplereading\" text=\"Simple Reading\" />\n    </div>\n  );\n};\n\nexport default App;\n","import * as React from \"react\";\nimport \"../assets/styles/App.scss\";\n\ndeclare var NDEFReader: any;\n\nconst SimpleReading = () => {\n  const [result, setResult] = React.useState(\"...pending\");\n\n  React.useEffect(() => {\n    const reader = new NDEFReader();\n    reader\n      .scan()\n      .then(() => {\n        alert(\"Scan started successfully.\");\n        reader.onerror = () => {\n          setResult(\"Cannot read data from the NFC tag. Try another one?\");\n        };\n        reader.onreading = (event: any) => {\n          console.log(\"NDEF message read.\");\n          alert(JSON.stringify(event));\n          setResult(event);\n        };\n      })\n      .catch((error: any) => {\n        alert(`Error! Scan failed to start: ${error}.`);\n      });\n  }, []);\n\n  return (\n    <div className=\"home-wrapper\">\n      <h2>Scan your NFC token!</h2>\n    </div>\n  );\n};\n\nexport default SimpleReading;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles/global.scss\";\nimport App from \"./pages/App\";\nimport SimpleReading from \"./pages/SimpleReading\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Route path=\"/\" exact component={App} />\n      <Route path=\"/simplereading\" exact component={SimpleReading} />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}